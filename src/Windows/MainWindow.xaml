<Window x:Class="MultiChatViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MultiChatViewer"
        Title="Multi-Platform Chat Viewer" 
        Height="600" 
        Width="800"
        MinHeight="400"
        MinWidth="400"
        WindowStartupLocation="CenterScreen"
        Icon="../../Resources/logo.ico">    <Window.Resources>
        <!-- Converters -->
        <local:MessagePartsToInlinesConverter x:Key="MessagePartsToInlinesConverter"/>
        <local:UnderscoreToSpaceConverter x:Key="UnderscoreToSpaceConverter"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <local:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        
        <!-- Dark Mode ScrollBar Styles -->
        <Style x:Key="DarkScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="DarkScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="2" Background="#555" BorderBrush="Transparent">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#777"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="DarkVerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="12"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition MaxHeight="12"/>
                </Grid.RowDefinitions>
                <Border Grid.RowSpan="3" CornerRadius="2" Background="#2d2d30"/>
                <RepeatButton Grid.Row="0" Style="{StaticResource DarkScrollBarPageButton}" Height="12" Command="ScrollBar.LineUpCommand" Content="▲" Foreground="#555" FontSize="8"/>
                <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource DarkScrollBarPageButton}" Command="ScrollBar.PageUpCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource DarkScrollBarThumb}" Margin="1,0,1,0"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource DarkScrollBarPageButton}" Command="ScrollBar.PageDownCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Row="2" Style="{StaticResource DarkScrollBarPageButton}" Height="12" Command="ScrollBar.LineDownCommand" Content="▼" Foreground="#555" FontSize="8"/>
            </Grid>
        </ControlTemplate>

        <ControlTemplate x:Key="DarkHorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="12"/>
                    <ColumnDefinition Width="0.00001*"/>
                    <ColumnDefinition MaxWidth="12"/>
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#2d2d30"/>
                <RepeatButton Grid.Column="0" Style="{StaticResource DarkScrollBarPageButton}" Width="12" Command="ScrollBar.LineLeftCommand" Content="◄" Foreground="#555" FontSize="8"/>
                <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource DarkScrollBarPageButton}" Command="ScrollBar.PageLeftCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource DarkScrollBarThumb}" Margin="0,1,0,1"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource DarkScrollBarPageButton}" Command="ScrollBar.PageRightCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Column="2" Style="{StaticResource DarkScrollBarPageButton}" Width="12" Command="ScrollBar.LineRightCommand" Content="►" Foreground="#555" FontSize="8"/>
            </Grid>
        </ControlTemplate>

        <Style x:Key="DarkScrollBarStyle" TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="12"/>
                    <Setter Property="Template" Value="{StaticResource DarkHorizontalScrollBar}"/>
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="12"/>
                    <Setter Property="Height" Value="Auto"/>
                    <Setter Property="Template" Value="{StaticResource DarkVerticalScrollBar}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="DarkScrollViewer" TargetType="{x:Type ScrollViewer}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="Corner" Grid.Column="1" Fill="#2d2d30" Grid.Row="1"/>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource DarkScrollBarStyle}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource DarkScrollBarStyle}"/>
                        </Grid>
                    </ControlTemplate>                </Setter.Value>
            </Setter>
        </Style>        <DataTemplate x:Key="ChatMessageTemplate">
            <Border Padding="3,2" Margin="1,1">
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Background" Value="Transparent"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSystemMessage}" Value="True">
                                <Setter Property="Background" Value="#2d2d30"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>                <!-- Single TextBlock with proper text wrapping and hanging indent -->                <local:HighlightedTextBlock 
                    MessageParts="{Binding ParsedMessage}"
                    CustomFontSize="{Binding DataContext.ChatFontSize, RelativeSource={RelativeSource AncestorType=Window}}"
                    Timestamp="{Binding Timestamp}"
                    Username="{Binding Username}"
                    IsSystemMessage="{Binding IsSystemMessage}"
                    SourcePlatform="{Binding SourcePlatform}"
                    ShowTimestamp="{Binding DataContext.ShowTimestamps, RelativeSource={RelativeSource AncestorType=Window}}"
                    VerticalAlignment="Top"
                    UsernameClick="HighlightedTextBlock_UsernameClick"
                    MentionClick="HighlightedTextBlock_MentionClick"/>
            </Border>
        </DataTemplate>

        <!-- Dark Menu Styles -->
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="Background" Value="#2d2d30"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid x:Name="Grid" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="13"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="30"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                <Border x:Name="GlyphPanel" BorderBrush="#FF26A0DA" BorderThickness="1" Background="#3D26A0DA" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
                                    <Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#FF212121" FlowDirection="LeftToRight" Height="11" Width="10"/>
                                </Border>
                                <ContentPresenter x:Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                                <Path x:Name="Arrow" Grid.Column="5" Data="M0,0L0,8L4,4z" Fill="White" HorizontalAlignment="Center" Margin="4,0,6,0" VerticalAlignment="Center"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" PlacementTarget="{Binding ElementName=templateRoot}">
                                    <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="#2d2d30" Padding="2">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid x:Name="Grid1" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="Canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                </Canvas>
                                                <Rectangle x:Name="Rectangle" Fill="#2d2d30" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" TargetName="templateRoot" Value="#404040"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                                <Setter Property="Fill" TargetName="Glyph" Value="#FF707070"/>
                                <Setter Property="Fill" TargetName="Arrow" Value="#FF707070"/>
                            </Trigger>
                            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                            </Trigger>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                <Setter Property="Margin" TargetName="SubMenuBorder" Value="0,0,5,5"/>
                                <Setter Property="Effect" TargetName="SubMenuBorder">
                                    <Setter.Value>
                                        <DropShadowEffect ShadowDepth="2" Color="Black"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="HasItems" Value="False">
                                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="False"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="MinWidth" TargetName="templateRoot" Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="False"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="MinHeight" TargetName="templateRoot" Value="19"/>
                            </MultiTrigger>
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                                <Setter Property="Placement" TargetName="PART_Popup" Value="Bottom"/>
                                <Setter Property="Margin" TargetName="templateRoot" Value="0"/>
                                <Setter Property="Padding" TargetName="templateRoot" Value="6,3"/>
                                <Setter Property="Grid.IsSharedSizeScope" TargetName="Grid" Value="True"/>
                            </Trigger>
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                                <Setter Property="Margin" TargetName="templateRoot" Value="0"/>
                                <Setter Property="Padding" TargetName="templateRoot" Value="6,3"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Role" Value="TopLevelHeader"/>
                                    <Condition Property="IsSubmenuOpen" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="#404040"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#404040"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>        </Style>
    </Window.Resources>
    
    <Grid><Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>        <!-- Menu Bar -->        
        <Menu Grid.Row="0" Background="#2d2d30" Foreground="White">
            <Menu.Style>
                <Style TargetType="Menu">
                    <Setter Property="IsEnabled" Value="True"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading}" Value="True">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Menu.Style>
            <MenuItem Header="_File">
                <MenuItem Header="_Manage Channels" Click="FollowedChannelsMenuItem_Click"/>
                <Separator/>
                <MenuItem Header="_Filter Users" Click="UserFiltersMenuItem_Click"/>
                <MenuItem Header="_Lookup Users" Click="LookupUsersMenuItem_Click"/>
                <Separator/>
                <MenuItem Header="_About" Click="AboutMenuItem_Click"/>
                <MenuItem Header="_Exit" Click="ExitMenuItem_Click"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="_Font Scaling">
                    <MenuItem Header="-50%" Click="FontScale50_Click"/>
                    <MenuItem Header="-75%" Click="FontScale75_Click"/>
                    <MenuItem Header="_Default" Click="FontScaleDefault_Click"/>
                    <MenuItem Header="+125%" Click="FontScale125_Click"/>
                    <MenuItem Header="+150%" Click="FontScale150_Click"/>
                    <MenuItem Header="+200%" Click="FontScale200_Click"/>                </MenuItem>
                <Separator/>
                <MenuItem Header="Show _Timestamps" IsCheckable="True" IsChecked="{Binding ShowTimestamps}" Click="ShowTimestampsMenuItem_Click"/>                <Separator/>
                <MenuItem Header="_Streamer Mentions" IsCheckable="True" IsChecked="{Binding IsStreamerMentionsWindowOpen}" Click="StreamerMentionsMenuItem_Click"/>
                <Separator/>
                <MenuItem Header="_Clear Chat" Click="ClearButton_Click"/>
            </MenuItem></Menu><!-- Chat Display -->
        <Grid Grid.Row="1">            <ListBox x:Name="ChatListBox"
                     ItemsSource="{Binding ChatMessages}" 
                     ItemTemplate="{StaticResource ChatMessageTemplate}"
                     Background="#1e1e1e"
                     BorderThickness="0"
                     Padding="10"
                     PreviewMouseWheel="ChatScrollViewer_PreviewMouseWheel"
                     ScrollViewer.ScrollChanged="ChatScrollViewer_ScrollChanged"
                     ScrollViewer.VerticalScrollBarVisibility="Auto"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     ScrollViewer.CanContentScroll="True"                     VirtualizingPanel.VirtualizationMode="Recycling"
                     VirtualizingPanel.IsVirtualizing="True"
                     VirtualizingPanel.IsContainerVirtualizable="True"
                     VirtualizingPanel.CacheLengthUnit="Item"                     VirtualizingPanel.CacheLength="20,20">
                <ListBox.Resources>
                    <!-- Apply dark scrollbar style to the ListBox's ScrollViewer -->
                    <Style TargetType="ScrollViewer" BasedOn="{StaticResource DarkScrollViewer}"/>
                </ListBox.Resources>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>                        <VirtualizingStackPanel VirtualizationMode="Recycling" 
                                               IsVirtualizing="True"
                                               IsItemsHost="True"
                                               Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Margin" Value="0,1"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="IsTabStop" Value="False"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox><!-- Scroll to Top Button -->
            <Button x:Name="ScrollToTopButton"
                    Click="ScrollToTopButton_Click"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    Margin="0,20,0,0"
                    Padding="15,8"
                    Background="#4a90e2"
                    Foreground="White"
                    FontWeight="SemiBold"
                    FontSize="13"
                    BorderThickness="0"
                    Visibility="{Binding ScrollToTopButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                    IsEnabled="{Binding IsLoading, Converter={StaticResource InverseBooleanConverter}}"
                    Cursor="Hand">
                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="📄 Scroll to Top"/>
                        <TextBlock Text=" (" Margin="5,0,0,0"/>
                        <TextBlock Text="{Binding PendingMessageCount}"/>
                        <TextBlock Text=" new messages)"/>
                    </StackPanel>
                </Button.Content>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Background" Value="#4a90e2"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="{TemplateBinding Background}"
                                            CornerRadius="20"
                                            Padding="{TemplateBinding Padding}">
                                        <ContentPresenter HorizontalAlignment="Center" 
                                                        VerticalAlignment="Center"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#357abd"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#285a8a"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>        <!-- Status Bar -->
        <Border Grid.Row="2" Background="#2d2d30" Padding="10" BorderBrush="#3c3c3c" BorderThickness="0,1,0,0">
            <Grid x:Name="StatusBarGrid">
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="LayoutTransform">
                            <Setter.Value>
                                <ScaleTransform/>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <!-- Switch to vertical layout when window is narrow -->
                            <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static local:WidthToLayoutConverter.Instance}}" Value="True">
                                <Setter Property="LayoutTransform">
                                    <Setter.Value>
                                        <ScaleTransform/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                
                <!-- Horizontal Layout (default) -->
                <Grid x:Name="HorizontalLayout">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static local:WidthToLayoutConverter.Instance}}" Value="True">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <!-- Left: Status Message -->
                    <TextBlock Grid.Column="0" Text="{Binding StatusMessage}" VerticalAlignment="Center" Margin="0,0,20,0" TextTrimming="CharacterEllipsis"/>
                    
                    <!-- Center: Message Count -->
                    <TextBlock Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Run Text="Messages: "/>
                        <Run Text="{Binding CurrentChannelMessageCount, StringFormat='{}{0:N0}'}" FontWeight="Bold"/>
                    </TextBlock>
                    
                    <!-- Right: Database Size -->
                    <TextBlock Grid.Column="2" VerticalAlignment="Center" Margin="20,0,0,0">
                        <Run Text="DB Size: "/>
                        <Run Text="{Binding CurrentChannelDatabaseSize}" FontWeight="Bold"/>
                    </TextBlock>
                </Grid>
                
                <!-- Vertical Layout (narrow window) -->
                <StackPanel x:Name="VerticalLayout" Orientation="Vertical" HorizontalAlignment="Center">
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static local:WidthToLayoutConverter.Instance}}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    
                    <!-- First Row: Status Message (channels only) -->
                    <TextBlock Text="{Binding StatusMessage}" 
                               VerticalAlignment="Center" 
                               HorizontalAlignment="Center"
                               Margin="0,0,0,2" 
                               TextTrimming="CharacterEllipsis" 
                               MaxWidth="300"/>
                    
                    <!-- Second Row: Message Count and Database Size -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,2,0,0">
                        <TextBlock VerticalAlignment="Center" Margin="0,0,20,0">
                            <Run Text="Messages: "/>
                            <Run Text="{Binding CurrentChannelMessageCount, StringFormat='{}{0:N0}'}" FontWeight="Bold"/>
                        </TextBlock>
                        <TextBlock VerticalAlignment="Center">
                            <Run Text="DB Size: "/>
                            <Run Text="{Binding CurrentChannelDatabaseSize}" FontWeight="Bold"/>
                        </TextBlock>
                    </StackPanel>
                </StackPanel>
            </Grid>
        </Border>
        
        <!-- Loading Overlay -->
        <Grid Grid.RowSpan="3" Background="#CC000000" Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <!-- Simple Loading Spinner -->
                <Grid Width="60" Height="60" Margin="0,0,0,20">
                    <Ellipse Width="60" Height="60" 
                             Stroke="#4CAF50" 
                             StrokeThickness="6" 
                             StrokeDashArray="15,5"
                             StrokeDashOffset="0">
                        <Ellipse.RenderTransform>
                            <RotateTransform x:Name="LoadingRotation" CenterX="30" CenterY="30"/>
                        </Ellipse.RenderTransform>
                        <Ellipse.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation
                                            Storyboard.TargetName="LoadingRotation"
                                            Storyboard.TargetProperty="Angle"
                                            From="0" To="360" 
                                            Duration="0:0:1.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Ellipse.Triggers>
                    </Ellipse>
                </Grid>
                
                <!-- Loading Message -->
                <TextBlock Text="{Binding LoadingMessage}" 
                           Foreground="White" 
                           FontSize="16" 
                           FontWeight="Bold"
                           HorizontalAlignment="Center"
                           TextAlignment="Center"/>
                           
                <TextBlock Text="Please wait..." 
                           Foreground="#CCCCCC" 
                           FontSize="12" 
                           Margin="0,5,0,0"
                           HorizontalAlignment="Center"
                           TextAlignment="Center"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
